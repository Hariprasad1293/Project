Simple Containers
-------------------

Pairs
=====
-> A pair can be used to store 2 items. These 2 items can be of same type or different type.
Ex: Points in a 2d space, Interval, item and its price, 
-> Default constructor in pair initializes as 0 for integer and empty string for string type.


#include<utility>
#include<iostream>
using namespace std;
int main(){
    pair<int, int> p1(10, 20);
    pair<int, string> p2(10, "Hello");
    pair<int, int> p3;
    pair<int, int> p4;
    p4 = {10, 20};
    pair<int, int> p5;
    p5 = make_pair(20, 30);
    
    cout<<p1.first<<" "<<p1.second<<"\n";
    cout<<p2.first<<" "<<p2.second<<"\n";
    cout<<p3.first<<" "<<p3.second<<"\n";
    cout<<p4.first<<" "<<p4.second<<"\n";
    cout<<p5.first<<" "<<p5.second<<"\n";
    
    cout<<(p1 == p5)<<" "<<(p1 != p5)<<" "<<(p1 > p5)<<" "<<(p1 < p5)<<"\n";
    
    return 0;
}



/*   Sort an array according to another array 
I/P : a[] = {3, 1, 2}
      b[] = {'G', 'E', 'K'}
O/p : b[] = {'E', 'K', 'G'}

I/P : a[] = {4, 1, 3, 2}
      b[] = {'A', 'X', 'B', 'Y'}
O/p : b[] = {'X', 'Y', 'B', 'A'}
*/
#include<bits/stdc++.h>
using namespace std;
void sortArray(int arr[], char carr[], int n){
    pair<int, char> p[n];
    for(int i = 0; i < n; i++){
        p[i] = {arr[i], carr[i]};  // p[i].first = arr[i], p[i].second = carr[i]
    }
    sort(p, p+n);
    
    for(int i = 0; i < n; i++){
        cout<<p[i].second<<" ";
    }
    
}
int main(){
    int n;
    cin>>n;
    int arr[n];
    char carr[n];
    for(int i = 0; i < n; i++){
        cin>>arr[i];
    }
    for(int i = 0; i < n; i++){
        cin>>carr[i];
    }
    sortArray(arr, carr, n);
    
    
    return 0;
}